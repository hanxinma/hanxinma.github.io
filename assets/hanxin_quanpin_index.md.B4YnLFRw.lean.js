import{_ as e,k as E,p as t,ac as o}from"./chunks/framework.DA7r4KNg.js";const A=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"hanxin/quanpin/index.md","filePath":"hanxin/quanpin/index.md"}'),n={name:"hanxin/quanpin/index.md"};function r(l,a,i,B,s,h){return t(),E("div",null,a[0]||(a[0]=[o('<h2 id="%E5%85%A8%E6%8B%BC%E7%89%88%E6%B1%89%E5%BF%83%E7%A0%81%E4%BB%8B%E7%BB%8D" tabindex="-1">全拼版汉心码介绍 <a class="header-anchor" href="#全拼版汉心码介绍" aria-label="Permalink to &quot;全拼版汉心码介绍&quot;">​</a></h2><h3 id="%E6%A0%B8%E5%BF%83%E4%BC%98%E5%8C%96%EF%BC%9A%E5%85%A8%E6%8B%BC%E7%94%A8%E6%88%B7%E7%9A%84%E8%BE%85%E5%8A%A9%E7%A0%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88" tabindex="-1">核心优化：全拼用户的辅助码解决方案 <a class="header-anchor" href="#核心优化：全拼用户的辅助码解决方案" aria-label="Permalink to &quot;核心优化：全拼用户的辅助码解决方案&quot;">​</a></h3><p>汉心码针对全拼用户开发了专用辅助码优化方案，让全拼用户无需切换双拼/形码，即可通过<strong>拼音+部首首字母</strong>的方式使用辅助码，提升输入效率。</p><h3 id="%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95" tabindex="-1">使用方法 <a class="header-anchor" href="#使用方法" aria-label="Permalink to &quot;使用方法&quot;">​</a></h3><ul><li><strong>基础规则</strong>：输入汉字全拼后，追加该字<strong>部首的首字母</strong>作为辅助码。 <ul><li>示例：输入“蝴”时，全拼为“hu”，部首“虫”的首字母为“i”，故编码为 <strong>“hui”</strong>。</li></ul></li></ul><h3 id="%E6%A0%B8%E5%BF%83%E4%BC%98%E5%8A%BF%EF%BC%9A%E8%A7%A3%E5%86%B3%E5%85%A8%E6%8B%BC%E8%BE%85%E5%8A%A9%E7%A0%81%E7%9A%84%E5%86%B2%E7%AA%81%E9%9A%BE%E9%A2%98" tabindex="-1">核心优势：解决全拼辅助码的冲突难题 <a class="header-anchor" href="#核心优势：解决全拼辅助码的冲突难题" aria-label="Permalink to &quot;核心优势：解决全拼辅助码的冲突难题&quot;">​</a></h3><p>全拼辅助码方案因拼音组合复杂，易出现编码冲突（如“hui+i”可能同时对应“会”“蝴”等字）。汉心码通过<strong>独特的优先级优化</strong>，确保常用字/目标字优先展示：</p><ul><li>示例：输入“hui+i”时，系统会优先将高频字“会”展示在首位，兼顾辅助码功能与日常输入习惯。</li></ul><p>还有完全不冲突的版本，就是辅码字全部位与第2位。</p><h4 id="%E5%B9%B6%E4%B8%94%E8%AF%8D%E7%AE%80%E7%A0%81%E4%B9%9F%E5%81%9A%E4%BA%86%E8%AE%BE%E8%AE%A1%EF%BC%8C%E6%9C%89%E5%8A%A9%E4%BA%8E%E6%8B%BC%E9%9F%B3%E7%9B%B2%E6%89%93%E5%92%8C%E5%BF%AB%E6%89%93" tabindex="-1">并且词简码也做了设计，有助于拼音盲打和快打 <a class="header-anchor" href="#并且词简码也做了设计，有助于拼音盲打和快打" aria-label="Permalink to &quot;并且词简码也做了设计，有助于拼音盲打和快打&quot;">​</a></h4><p>词尽量打简码，汉心码专门针对简码作了优化，然后可以做到3个键就一个词。</p><ul><li>示例：输入“chuanglian”时，只要输入“clg” 既是“窗帘” 。g是盖头的字母g。</li></ul><h3 id="%E9%80%82%E7%94%A8%E5%9C%BA%E6%99%AF" tabindex="-1">适用场景 <a class="header-anchor" href="#适用场景" aria-label="Permalink to &quot;适用场景&quot;">​</a></h3><p>适合习惯全拼输入、希望通过简单辅助码减少重码翻页的用户，无需学习复杂形码规则，仅需记忆常用部首首字母即可上手。</p><h2 id="%E9%97%AE%E7%AD%94" tabindex="-1">问答 <a class="header-anchor" href="#问答" aria-label="Permalink to &quot;问答&quot;">​</a></h2><blockquote><blockquote><p><strong>问-拼音打字能不能不用选字.像五笔那样?</strong></p><blockquote><p>答:可以的.汉心码设计了一个比五笔容易学的形码，也就汉字的偏旁的读音码，需要选的时候，直接加部首读音首字母，就不用选字。</p></blockquote><p><strong>问-我不学五笔,不学双拼,如何打拼音也可以变快?</strong></p><blockquote><p>答:不怎么要学的方法就是不打全码，尽量打简码，汉心码专门针对简码作了优化，然后可以做到3个键就一个词。</p></blockquote><p><strong>问-能不能实现五笔的盲打?</strong></p><blockquote><p>答:你打熟了基本能实现拼音的盲打。</p></blockquote></blockquote></blockquote>',16)]))}const c=e(n,[["render",r]]);export{A as __pageData,c as default};
